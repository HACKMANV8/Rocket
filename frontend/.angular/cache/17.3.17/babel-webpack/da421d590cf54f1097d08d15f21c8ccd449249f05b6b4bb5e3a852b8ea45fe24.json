{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nChart.register(...registerables);\nexport class ChartsComponent {\n  constructor() {\n    this.data = [];\n    this.type = 'line'; // Added 'doughnut'\n    this.title = '';\n    this.chartId = ''; // ADD THIS - unique ID for multiple charts in chat\n  }\n  ngOnInit() {\n    // Small delay to ensure DOM is ready, especially in chat context\n    setTimeout(() => {\n      this.renderChart();\n    }, 100);\n  }\n  ngOnChanges(changes) {\n    if ((changes['data'] || changes['type']) && this.data && this.data.length) {\n      setTimeout(() => {\n        this.renderChart();\n      }, 100);\n    }\n  }\n  ngOnDestroy() {\n    // Clean up chart to prevent memory leaks\n    if (this.chartInstance) {\n      this.chartInstance.destroy();\n    }\n  }\n  renderChart() {\n    const chartId = this.chartId || this.title;\n    const canvas = document.getElementById(chartId + '_chart');\n    if (!canvas) {\n      console.warn('Canvas element not found for:', chartId);\n      return;\n    }\n    // Destroy existing chart\n    if (this.chartInstance) {\n      this.chartInstance.destroy();\n    }\n    // Enhanced data processing for different chart types\n    let labels = [];\n    let datasets = [];\n    if (this.type === 'pie' || this.type === 'doughnut') {\n      // Handle equipment status, incident types, etc.\n      labels = this.data.map(d => d.status || d.type || d.name || d.label || 'Unknown');\n      datasets = [{\n        data: this.data.map(d => d.count || d.value || d.percentage || 0),\n        backgroundColor: this.generateColors(labels.length, 0.7),\n        borderColor: this.generateColors(labels.length, 1),\n        borderWidth: 2\n      }];\n    } else {\n      // For line/bar charts (production data, trends)\n      labels = Array.from(new Set(this.data.map(d => d.month || d.date || d.period || ''))).filter(Boolean);\n      // Extract numeric data fields (exclude label fields)\n      const numericFields = Object.keys(this.data[0] || {}).filter(k => k !== 'month' && k !== 'date' && k !== 'period' && k !== 'label');\n      datasets = numericFields.map((key, idx) => ({\n        label: this.formatLabel(key),\n        data: this.data.map(d => d[key] || 0),\n        borderColor: this.getColor(idx),\n        backgroundColor: this.type === 'bar' ? this.getColor(idx, 0.7) : this.getColor(idx, 0.1),\n        fill: this.type === 'line',\n        tension: 0.3,\n        borderWidth: 2\n      }));\n    }\n    this.chartInstance = new Chart(canvas, {\n      type: this.type,\n      data: {\n        labels,\n        datasets\n      },\n      options: this.getChartOptions()\n    });\n  }\n  getChartOptions() {\n    const baseOptions = {\n      responsive: true,\n      maintainAspectRatio: true,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top'\n        },\n        title: {\n          display: !!this.title,\n          text: this.title,\n          font: {\n            size: 14\n          }\n        }\n      }\n    };\n    // Type-specific options\n    if (this.type === 'line' || this.type === 'bar') {\n      return {\n        ...baseOptions,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n    }\n    return baseOptions;\n  }\n  generateColors(count, alpha = 1) {\n    const colors = [`rgba(76, 175, 80, ${alpha})`, `rgba(33, 150, 243, ${alpha})`, `rgba(255, 193, 7, ${alpha})`, `rgba(244, 67, 54, ${alpha})`, `rgba(156, 39, 176, ${alpha})`, `rgba(0, 188, 212, ${alpha})`, `rgba(255, 152, 0, ${alpha})`, `rgba(121, 85, 72, ${alpha})` // Brown\n    ];\n    // If we need more colors than available, generate variations\n    if (count > colors.length) {\n      const additionalColors = [];\n      for (let i = colors.length; i < count; i++) {\n        const hue = i * 137.508 % 360; // Golden angle approximation\n        additionalColors.push(`hsla(${hue}, 70%, 65%, ${alpha})`);\n      }\n      return [...colors, ...additionalColors].slice(0, count);\n    }\n    return colors.slice(0, count);\n  }\n  formatLabel(key) {\n    return key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());\n  }\n  getColor(index, alpha = 1) {\n    const colors = [`rgba(76, 175, 80, ${alpha})`, `rgba(33, 150, 243, ${alpha})`, `rgba(255, 193, 7, ${alpha})`, `rgba(244, 67, 54, ${alpha})`, `rgba(156, 39, 176, ${alpha})`, `rgba(0, 188, 212, ${alpha})` // Cyan\n    ];\n    return colors[index % colors.length];\n  }\n  static {\n    this.ɵfac = function ChartsComponent_Factory(t) {\n      return new (t || ChartsComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChartsComponent,\n      selectors: [[\"app-charts\"]],\n      inputs: {\n        data: \"data\",\n        type: \"type\",\n        title: \"title\",\n        chartId: \"chartId\",\n        fuelChartData: \"fuelChartData\",\n        productionChartData: \"productionChartData\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 3,\n      vars: 1,\n      consts: [[1, \"chart-container\"], [1, \"chart-wrapper\"], [3, \"id\"]],\n      template: function ChartsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵelement(2, \"canvas\", 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"id\", (ctx.chartId || ctx.title) + \"_chart\");\n        }\n      },\n      styles: [\".chart-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  margin: 0.5rem 0;\\n}\\n\\n.chart-wrapper[_ngcontent-%COMP%] {\\n  background: #ffffff;\\n  border-radius: 8px;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n  padding: 1rem;\\n  border: 1px solid #e0e0e0;\\n}\\n\\n\\n\\n.charts-container[_ngcontent-%COMP%], .chart-card[_ngcontent-%COMP%] {\\n  display: block;\\n  width: 100%;\\n  padding: 0;\\n  margin: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIsd0NBQXdDO0VBQ3hDLGFBQWE7RUFDYix5QkFBeUI7QUFDM0I7O0FBRUEsc0RBQXNEO0FBQ3REO0VBQ0UsY0FBYztFQUNkLFdBQVc7RUFDWCxVQUFVO0VBQ1YsU0FBUztBQUNYIiwiZmlsZSI6ImNoYXJ0cy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0LWNvbnRhaW5lciB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luOiAwLjVyZW0gMDtcclxufVxyXG5cclxuLmNoYXJ0LXdyYXBwZXIge1xyXG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XHJcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gIGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgcGFkZGluZzogMXJlbTtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZTBlMGUwO1xyXG59XHJcblxyXG4vKiBSZW1vdmUgdGhlIG9sZCBzdHlsZXMgdGhhdCBkb24ndCBmaXQgY2hhdCBjb250ZXh0ICovXHJcbi5jaGFydHMtY29udGFpbmVyLCAuY2hhcnQtY2FyZCB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcGFkZGluZzogMDtcclxuICBtYXJnaW46IDA7XHJcbn0iXX0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jaGFydHMvY2hhcnRzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0VBQ1gsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQix3Q0FBd0M7RUFDeEMsYUFBYTtFQUNiLHlCQUF5QjtBQUMzQjs7QUFFQSxzREFBc0Q7QUFDdEQ7RUFDRSxjQUFjO0VBQ2QsV0FBVztFQUNYLFVBQVU7RUFDVixTQUFTO0FBQ1g7QUFDQSw0K0JBQTQrQiIsInNvdXJjZXNDb250ZW50IjpbIi5jaGFydC1jb250YWluZXIge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIG1hcmdpbjogMC41cmVtIDA7XHJcbn1cclxuXHJcbi5jaGFydC13cmFwcGVyIHtcclxuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICBib3gtc2hhZG93OiAwIDFweCAzcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gIHBhZGRpbmc6IDFyZW07XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2UwZTBlMDtcclxufVxyXG5cclxuLyogUmVtb3ZlIHRoZSBvbGQgc3R5bGVzIHRoYXQgZG9uJ3QgZml0IGNoYXQgY29udGV4dCAqL1xyXG4uY2hhcnRzLWNvbnRhaW5lciwgLmNoYXJ0LWNhcmQge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgbWFyZ2luOiAwO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Chart","registerables","register","ChartsComponent","constructor","data","type","title","chartId","ngOnInit","setTimeout","renderChart","ngOnChanges","changes","length","ngOnDestroy","chartInstance","destroy","canvas","document","getElementById","console","warn","labels","datasets","map","d","status","name","label","count","value","percentage","backgroundColor","generateColors","borderColor","borderWidth","Array","from","Set","month","date","period","filter","Boolean","numericFields","Object","keys","k","key","idx","formatLabel","getColor","fill","tension","options","getChartOptions","baseOptions","responsive","maintainAspectRatio","plugins","legend","display","position","text","font","size","scales","y","beginAtZero","alpha","colors","additionalColors","i","hue","push","slice","replace","str","toUpperCase","index","selectors","inputs","fuelChartData","productionChartData","features","i0","ɵɵNgOnChangesFeature","decls","vars","consts","template","ChartsComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\pavit\\OneDrive\\Desktop\\mit\\thanucheck\\bhooom\\frontend\\src\\app\\components\\charts\\charts.component.ts","C:\\Users\\pavit\\OneDrive\\Desktop\\mit\\thanucheck\\bhooom\\frontend\\src\\app\\components\\charts\\charts.component.html"],"sourcesContent":["import { Component, Input, OnChanges, SimpleChanges, AfterViewInit, OnInit, OnDestroy } from '@angular/core';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\n@Component({\r\n  selector: 'app-charts',\r\n  templateUrl: './charts.component.html',\r\n  styleUrls: ['./charts.component.css']\r\n})\r\nexport class ChartsComponent implements OnChanges, OnInit, OnDestroy {\r\n  @Input() data: any[] = [];        \r\n  @Input() type: 'line' | 'bar' | 'pie' | 'doughnut' = 'line'; // Added 'doughnut'\r\n  @Input() title: string = '';      \r\n  @Input() chartId: string = '';    // ADD THIS - unique ID for multiple charts in chat\r\n  @Input() fuelChartData: any;\r\n  @Input() productionChartData: any;\r\n  \r\n  chartInstance: any;\r\n\r\n  ngOnInit(): void {\r\n    // Small delay to ensure DOM is ready, especially in chat context\r\n    setTimeout(() => {\r\n      this.renderChart();\r\n    }, 100);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if ((changes['data'] || changes['type']) && this.data && this.data.length) {\r\n      setTimeout(() => {\r\n        this.renderChart();\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // Clean up chart to prevent memory leaks\r\n    if (this.chartInstance) {\r\n      this.chartInstance.destroy();\r\n    }\r\n  }\r\n\r\n  renderChart() {\r\n    const chartId = this.chartId || this.title;\r\n    const canvas = document.getElementById(chartId + '_chart') as HTMLCanvasElement;\r\n    \r\n    if (!canvas) {\r\n      console.warn('Canvas element not found for:', chartId);\r\n      return;\r\n    }\r\n\r\n    // Destroy existing chart\r\n    if (this.chartInstance) {\r\n      this.chartInstance.destroy();\r\n    }\r\n\r\n    // Enhanced data processing for different chart types\r\n    let labels = [];\r\n    let datasets = [];\r\n\r\n    if (this.type === 'pie' || this.type === 'doughnut') {\r\n      // Handle equipment status, incident types, etc.\r\n      labels = this.data.map(d => d.status || d.type || d.name || d.label || 'Unknown');\r\n      datasets = [{\r\n        data: this.data.map(d => d.count || d.value || d.percentage || 0),\r\n        backgroundColor: this.generateColors(labels.length, 0.7),\r\n        borderColor: this.generateColors(labels.length, 1),\r\n        borderWidth: 2\r\n      }];\r\n    } else {\r\n      // For line/bar charts (production data, trends)\r\n      labels = Array.from(new Set(this.data.map(d => d.month || d.date || d.period || ''))).filter(Boolean);\r\n      \r\n      // Extract numeric data fields (exclude label fields)\r\n      const numericFields = Object.keys(this.data[0] || {}).filter(k => \r\n        k !== 'month' && k !== 'date' && k !== 'period' && k !== 'label'\r\n      );\r\n      \r\n      datasets = numericFields.map((key, idx) => ({\r\n        label: this.formatLabel(key),\r\n        data: this.data.map(d => d[key] || 0),\r\n        borderColor: this.getColor(idx),\r\n        backgroundColor: this.type === 'bar' ? this.getColor(idx, 0.7) : this.getColor(idx, 0.1),\r\n        fill: this.type === 'line',\r\n        tension: 0.3,\r\n        borderWidth: 2\r\n      }));\r\n    }\r\n\r\n    this.chartInstance = new Chart(canvas, {\r\n      type: this.type,\r\n      data: { labels, datasets },\r\n      options: this.getChartOptions()\r\n    });\r\n  }\r\n\r\n  private getChartOptions(): any {\r\n    const baseOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: true,\r\n      plugins: { \r\n        legend: { \r\n          display: true,\r\n          position: 'top' as const\r\n        }, \r\n        title: { \r\n          display: !!this.title, \r\n          text: this.title,\r\n          font: { size: 14 }\r\n        } \r\n      }\r\n    };\r\n\r\n    // Type-specific options\r\n    if (this.type === 'line' || this.type === 'bar') {\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    return baseOptions;\r\n  }\r\n\r\n  private generateColors(count: number, alpha: number = 1): string[] {\r\n    const colors = [\r\n      `rgba(76, 175, 80, ${alpha})`,    // Green\r\n      `rgba(33, 150, 243, ${alpha})`,   // Blue\r\n      `rgba(255, 193, 7, ${alpha})`,    // Amber\r\n      `rgba(244, 67, 54, ${alpha})`,    // Red\r\n      `rgba(156, 39, 176, ${alpha})`,   // Purple\r\n      `rgba(0, 188, 212, ${alpha})`,    // Cyan\r\n      `rgba(255, 152, 0, ${alpha})`,    // Orange\r\n      `rgba(121, 85, 72, ${alpha})`     // Brown\r\n    ];\r\n\r\n    // If we need more colors than available, generate variations\r\n    if (count > colors.length) {\r\n      const additionalColors = [];\r\n      for (let i = colors.length; i < count; i++) {\r\n        const hue = (i * 137.508) % 360; // Golden angle approximation\r\n        additionalColors.push(`hsla(${hue}, 70%, 65%, ${alpha})`);\r\n      }\r\n      return [...colors, ...additionalColors].slice(0, count);\r\n    }\r\n\r\n    return colors.slice(0, count);\r\n  }\r\n\r\n  private formatLabel(key: string): string {\r\n    return key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());\r\n  }\r\n\r\n  getColor(index: number, alpha = 1) {\r\n    const colors = [\r\n      `rgba(76, 175, 80, ${alpha})`,    // Green\r\n      `rgba(33, 150, 243, ${alpha})`,   // Blue\r\n      `rgba(255, 193, 7, ${alpha})`,    // Amber\r\n      `rgba(244, 67, 54, ${alpha})`,    // Red\r\n      `rgba(156, 39, 176, ${alpha})`,   // Purple\r\n      `rgba(0, 188, 212, ${alpha})`     // Cyan\r\n    ];\r\n    return colors[index % colors.length];\r\n  }\r\n}","<div class=\"chart-container\">\r\n  <div class=\"chart-wrapper\">\r\n    <canvas [id]=\"(chartId || title) + '_chart'\"></canvas>\r\n  </div>\r\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}