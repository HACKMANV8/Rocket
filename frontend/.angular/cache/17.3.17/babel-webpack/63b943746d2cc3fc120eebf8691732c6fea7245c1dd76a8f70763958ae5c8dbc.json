{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nChart.register(...registerables);\nexport let ChartsComponent = /*#__PURE__*/(() => {\n  class ChartsComponent {\n    constructor() {\n      this.data = []; // data array from backend\n      this.type = 'line'; // chart type\n      this.title = ''; // optional chart title\n    }\n    ngOnChanges(changes) {\n      if (changes['data'] && this.data.length) {\n        this.renderChart();\n      }\n    }\n    renderChart() {\n      const canvas = document.getElementById(this.title + '_chart');\n      if (!canvas) return;\n      if (this.chartInstance) this.chartInstance.destroy();\n      // Determine labels & datasets dynamically\n      let labels = [];\n      let datasets = [];\n      if (this.type === 'pie') {\n        labels = this.data.map(d => d.status || d.name || 'Label');\n        datasets = [{\n          data: this.data.map(d => d.count || 0),\n          backgroundColor: ['#4CAF50', '#FF5722', '#FFC107', '#2196F3', '#9C27B0', '#00BCD4']\n        }];\n      } else {\n        // For line/bar charts\n        labels = Array.from(new Set(this.data.map(d => d.month || d.date || '')));\n        const keys = Object.keys(this.data[0]).filter(k => k !== 'month' && k !== 'date');\n        datasets = keys.map((key, idx) => ({\n          label: key,\n          data: this.data.map(d => d[key] || 0),\n          borderColor: this.getColor(idx),\n          backgroundColor: this.getColor(idx, 0.5),\n          fill: this.type === 'line' ? false : true,\n          tension: 0.3\n        }));\n      }\n      this.chartInstance = new Chart(canvas, {\n        type: this.type,\n        data: {\n          labels,\n          datasets\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true\n            },\n            title: {\n              display: !!this.title,\n              text: this.title\n            }\n          }\n        }\n      });\n    }\n    getColor(index, alpha = 1) {\n      const colors = [`rgba(76, 175, 80, ${alpha})`, `rgba(33, 150, 243, ${alpha})`, `rgba(255, 193, 7, ${alpha})`, `rgba(244, 67, 54, ${alpha})`, `rgba(156, 39, 176, ${alpha})`, `rgba(0, 188, 212, ${alpha})` // Cyan\n      ];\n      return colors[index % colors.length];\n    }\n    static {\n      this.ɵfac = function ChartsComponent_Factory(t) {\n        return new (t || ChartsComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ChartsComponent,\n        selectors: [[\"app-charts\"]],\n        inputs: {\n          data: \"data\",\n          type: \"type\",\n          title: \"title\",\n          fuelChartData: \"fuelChartData\",\n          productionChartData: \"productionChartData\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        decls: 3,\n        vars: 1,\n        consts: [[1, \"charts-container\"], [1, \"chart-card\"], [3, \"id\"]],\n        template: function ChartsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵelement(2, \"canvas\", 2);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"id\", ctx.title + \"_chart\");\n          }\n        },\n        styles: [\".charts-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-around;\\n  gap: 1.5rem;\\n  padding: 1rem;\\n}\\n\\n.chart-card[_ngcontent-%COMP%] {\\n  background: #ffffff;\\n  border-radius: 12px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n  padding: 1rem;\\n  width: 45%;\\n  min-width: 300px;\\n}\\n\\nh3[_ngcontent-%COMP%] {\\n  color: #333;\\n  text-align: center;\\n  margin-bottom: 0.5rem;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLGVBQWU7RUFDZiw2QkFBNkI7RUFDN0IsV0FBVztFQUNYLGFBQWE7QUFDZjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsd0NBQXdDO0VBQ3hDLGFBQWE7RUFDYixVQUFVO0VBQ1YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixxQkFBcUI7QUFDdkIiLCJmaWxlIjoiY2hhcnRzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhcnRzLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgZ2FwOiAxLjVyZW07XHJcbiAgcGFkZGluZzogMXJlbTtcclxufVxyXG5cclxuLmNoYXJ0LWNhcmQge1xyXG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XHJcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcclxuICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gIHBhZGRpbmc6IDFyZW07XHJcbiAgd2lkdGg6IDQ1JTtcclxuICBtaW4td2lkdGg6IDMwMHB4O1xyXG59XHJcblxyXG5oMyB7XHJcbiAgY29sb3I6ICMzMzM7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcclxufVxyXG4iXX0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jaGFydHMvY2hhcnRzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsZUFBZTtFQUNmLDZCQUE2QjtFQUM3QixXQUFXO0VBQ1gsYUFBYTtBQUNmOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQix3Q0FBd0M7RUFDeEMsYUFBYTtFQUNiLFVBQVU7RUFDVixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLHFCQUFxQjtBQUN2Qjs7QUFFQSx3Z0NBQXdnQyIsInNvdXJjZXNDb250ZW50IjpbIi5jaGFydHMtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtd3JhcDogd3JhcDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICBnYXA6IDEuNXJlbTtcclxuICBwYWRkaW5nOiAxcmVtO1xyXG59XHJcblxyXG4uY2hhcnQtY2FyZCB7XHJcbiAgYmFja2dyb3VuZDogI2ZmZmZmZjtcclxuICBib3JkZXItcmFkaXVzOiAxMnB4O1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgcGFkZGluZzogMXJlbTtcclxuICB3aWR0aDogNDUlO1xyXG4gIG1pbi13aWR0aDogMzAwcHg7XHJcbn1cclxuXHJcbmgzIHtcclxuICBjb2xvcjogIzMzMztcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n      });\n    }\n  }\n  return ChartsComponent;\n})();","map":{"version":3,"names":["Chart","registerables","register","ChartsComponent","constructor","data","type","title","ngOnChanges","changes","length","renderChart","canvas","document","getElementById","chartInstance","destroy","labels","datasets","map","d","status","name","count","backgroundColor","Array","from","Set","month","date","keys","Object","filter","k","key","idx","label","borderColor","getColor","fill","tension","options","responsive","plugins","legend","display","text","index","alpha","colors","selectors","inputs","fuelChartData","productionChartData","features","i0","ɵɵNgOnChangesFeature","decls","vars","consts","template","ChartsComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\pavit\\OneDrive\\Desktop\\mit\\thanucheck\\bhooom\\frontend\\src\\app\\components\\charts\\charts.component.ts","C:\\Users\\pavit\\OneDrive\\Desktop\\mit\\thanucheck\\bhooom\\frontend\\src\\app\\components\\charts\\charts.component.html"],"sourcesContent":["import { Component, Input, OnChanges, SimpleChanges, AfterViewInit } from '@angular/core';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\n@Component({\r\n  selector: 'app-charts',\r\n  templateUrl: './charts.component.html',\r\n  styleUrls: ['./charts.component.css']\r\n})\r\nexport class ChartsComponent implements OnChanges {\r\n  @Input() data: any[] = [];        // data array from backend\r\n  @Input() type: 'line' | 'bar' | 'pie' = 'line'; // chart type\r\n  @Input() title: string = '';      // optional chart title\r\n   @Input() fuelChartData: any;\r\n  @Input() productionChartData: any;\r\n  chartInstance: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['data'] && this.data.length) {\r\n      this.renderChart();\r\n    }\r\n  }\r\n\r\n  renderChart() {\r\n    const canvas = document.getElementById(this.title + '_chart') as HTMLCanvasElement;\r\n    if (!canvas) return;\r\n    if (this.chartInstance) this.chartInstance.destroy();\r\n\r\n    // Determine labels & datasets dynamically\r\n    let labels = [];\r\n    let datasets = [];\r\n\r\n    if (this.type === 'pie') {\r\n      labels = this.data.map(d => d.status || d.name || 'Label');\r\n      datasets = [{\r\n        data: this.data.map(d => d.count || 0),\r\n        backgroundColor: [\r\n          '#4CAF50', '#FF5722', '#FFC107', '#2196F3', '#9C27B0', '#00BCD4'\r\n        ]\r\n      }];\r\n    } else {\r\n      // For line/bar charts\r\n      labels = Array.from(new Set(this.data.map(d => d.month || d.date || '')));\r\n      const keys = Object.keys(this.data[0]).filter(k => k !== 'month' && k !== 'date');\r\n      \r\n      datasets = keys.map((key, idx) => ({\r\n        label: key,\r\n        data: this.data.map(d => d[key] || 0),\r\n        borderColor: this.getColor(idx),\r\n        backgroundColor: this.getColor(idx, 0.5),\r\n        fill: this.type === 'line' ? false : true,\r\n        tension: 0.3\r\n      }));\r\n    }\r\n\r\n    this.chartInstance = new Chart(canvas, {\r\n      type: this.type,\r\n      data: { labels, datasets },\r\n      options: {\r\n        responsive: true,\r\n        plugins: { legend: { display: true }, title: { display: !!this.title, text: this.title } }\r\n      }\r\n    });\r\n  }\r\n\r\n  getColor(index: number, alpha = 1) {\r\n    const colors = [\r\n      `rgba(76, 175, 80, ${alpha})`,    // Green\r\n      `rgba(33, 150, 243, ${alpha})`,   // Blue\r\n      `rgba(255, 193, 7, ${alpha})`,    // Amber\r\n      `rgba(244, 67, 54, ${alpha})`,    // Red\r\n      `rgba(156, 39, 176, ${alpha})`,   // Purple\r\n      `rgba(0, 188, 212, ${alpha})`     // Cyan\r\n    ];\r\n    return colors[index % colors.length];\r\n  }\r\n}\r\n","<div class=\"charts-container\">\r\n\r\n  <div class=\"chart-card\">\r\n      <canvas [id]=\"title + '_chart'\"></canvas>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}