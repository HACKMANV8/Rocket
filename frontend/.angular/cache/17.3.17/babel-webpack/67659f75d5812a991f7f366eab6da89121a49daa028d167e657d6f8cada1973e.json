{"ast":null,"code":"import { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  // Health check\n  healthCheck() {\n    return this.http.get(`${this.apiUrl}/health`);\n  }\n  // ✅ UPDATED: Main query endpoint\n  sendQuery(query, language = 'en', includeAudio = true) {\n    return this.http.post(`${this.apiUrl}/query`, {\n      question: query,\n      language: language,\n      includeAudio: includeAudio\n    });\n  }\n  // ✅ ADDED: System status\n  getSystemStatus() {\n    return this.http.get(`${this.apiUrl}/system-status`);\n  }\n  // ✅ ADDED: Quick actions for sidebar\n  getQuickActions() {\n    return this.http.get(`${this.apiUrl}/quick-actions`);\n  }\n  // ✅ ADDED: Get supported languages\n  getLanguages() {\n    return this.http.get(`${this.apiUrl}/languages`);\n  }\n  // ✅ ADDED: Get recent incidents\n  getRecentIncidents(limit = 5) {\n    return this.http.get(`${this.apiUrl}/incidents?limit=${limit}`);\n  }\n  // ✅ ADDED: Get maintenance alerts\n  getEquipmentAlerts() {\n    return this.http.get(`${this.apiUrl}/maintenance-alerts`);\n  }\n  // ✅ ADDED: Get KPIs\n  getKPIs() {\n    return this.http.get(`${this.apiUrl}/kpis`);\n  }\n  // Test endpoint\n  testRAG() {\n    return this.http.get(`${this.apiUrl}/test`);\n  }\n  static {\n    this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","ApiService","constructor","http","apiUrl","healthCheck","get","sendQuery","query","language","includeAudio","post","question","getSystemStatus","getQuickActions","getLanguages","getRecentIncidents","limit","getEquipmentAlerts","getKPIs","testRAG","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pavit\\OneDrive\\Desktop\\mit\\thanucheck\\bhooom\\frontend\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private apiUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Health check\r\n  healthCheck(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/health`);\r\n  }\r\n\r\n  // ✅ UPDATED: Main query endpoint\r\n  sendQuery(query: string, language: string = 'en', includeAudio: boolean = true): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/query`, {\r\n      question: query,\r\n      language: language,\r\n      includeAudio: includeAudio\r\n    });\r\n  }\r\n\r\n  // ✅ ADDED: System status\r\n  getSystemStatus(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/system-status`);\r\n  }\r\n\r\n  // ✅ ADDED: Quick actions for sidebar\r\n  getQuickActions(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/quick-actions`);\r\n  }\r\n\r\n  // ✅ ADDED: Get supported languages\r\n  getLanguages(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/languages`);\r\n  }\r\n\r\n  // ✅ ADDED: Get recent incidents\r\n  getRecentIncidents(limit: number = 5): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/incidents?limit=${limit}`);\r\n  }\r\n\r\n  // ✅ ADDED: Get maintenance alerts\r\n  getEquipmentAlerts(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/maintenance-alerts`);\r\n  }\r\n\r\n  // ✅ ADDED: Get KPIs\r\n  getKPIs(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/kpis`);\r\n  }\r\n\r\n  // Test endpoint\r\n  testRAG(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/test`);\r\n  }\r\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACI,MAAM;EAEK;EAExC;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,SAAS,CAAC;EAC/C;EAEA;EACAG,SAASA,CAACC,KAAa,EAAEC,QAAA,GAAmB,IAAI,EAAEC,YAAA,GAAwB,IAAI;IAC5E,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAE;MAC5CQ,QAAQ,EAAEJ,KAAK;MACfC,QAAQ,EAAEA,QAAQ;MAClBC,YAAY,EAAEA;KACf,CAAC;EACJ;EAEA;EACAG,eAAeA,CAAA;IACb,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,gBAAgB,CAAC;EACtD;EAEA;EACAU,eAAeA,CAAA;IACb,OAAO,IAAI,CAACX,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,gBAAgB,CAAC;EACtD;EAEA;EACAW,YAAYA,CAAA;IACV,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,YAAY,CAAC;EAClD;EAEA;EACAY,kBAAkBA,CAACC,KAAA,GAAgB,CAAC;IAClC,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,oBAAoBa,KAAK,EAAE,CAAC;EACjE;EAEA;EACAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,qBAAqB,CAAC;EAC3D;EAEA;EACAe,OAAOA,CAAA;IACL,OAAO,IAAI,CAAChB,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,OAAO,CAAC;EAC7C;EAEA;EACAgB,OAAOA,CAAA;IACL,OAAO,IAAI,CAACjB,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,OAAO,CAAC;EAC7C;;;uBApDWH,UAAU,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVvB,UAAU;MAAAwB,OAAA,EAAVxB,UAAU,CAAAyB,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}