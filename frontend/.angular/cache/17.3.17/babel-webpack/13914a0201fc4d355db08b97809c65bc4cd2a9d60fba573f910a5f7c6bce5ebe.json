{"ast":null,"code":"/*import { Component, OnInit } from '@angular/core';\nimport { ApiService } from './services/api.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n   standalone: true // <-- add this\n})\nexport class AppComponent implements OnInit {\n  title = 'Mining Intelligence System';\n  isHealthy = false;\n  selectedLanguage = 'en';\n  languages: any = {};\n\n  constructor(private apiService: ApiService) {}\n\n  ngOnInit(): void {\n    this.checkHealth();\n    this.loadLanguages();\n  }\n\n  checkHealth(): void {\n    this.apiService.healthCheck().subscribe({\n      next: (response) => {\n        this.isHealthy = response.status === 'healthy';\n        console.log('✅ Backend is healthy:', response);\n      },\n      error: (error) => {\n        this.isHealthy = false;\n        console.error('❌ Backend health check failed:', error);\n      }\n    });\n  }\n\n  loadLanguages(): void {\n    this.apiService.getLanguages().subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.languages = response.languages;\n        }\n      },\n      error: (error) => console.error('Error loading languages:', error)\n    });\n  }\n\n  onLanguageChange(event: any): void {\n    this.selectedLanguage = event.target.value;\n  }\n}\n*/\nimport { __decorate } from \"tslib\";\n// src/app/app.component.ts\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n// Import child components\nimport { KpisComponent } from './components/kpis/kpis.component';\nimport { ChatComponent } from './components/chat/chat.component';\nimport { ChartsComponent } from './components/charts/charts.component';\nimport { GuidanceComponent } from './components/guidance/guidance.component';\nlet AppComponent = class AppComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.title = 'Mining Intelligence System';\n    this.isHealthy = false;\n    this.selectedLanguage = 'en';\n    this.languages = {};\n  }\n  ngOnInit() {\n    this.checkHealth();\n    this.loadLanguages();\n  }\n  checkHealth() {\n    this.apiService.healthCheck().subscribe({\n      next: response => {\n        this.isHealthy = response.status === 'healthy';\n        console.log('✅ Backend is healthy:', response);\n      },\n      error: error => {\n        this.isHealthy = false;\n        console.error('❌ Backend health check failed:', error);\n      }\n    });\n  }\n  loadLanguages() {\n    this.apiService.getLanguages().subscribe({\n      next: response => {\n        if (response.success) {\n          this.languages = response.languages;\n        }\n      },\n      error: error => console.error('Error loading languages:', error)\n    });\n  }\n  onLanguageChange(event) {\n    this.selectedLanguage = event.target.value;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  standalone: true,\n  imports: [FormsModule, KpisComponent, ChatComponent, ChartsComponent, GuidanceComponent]\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","FormsModule","KpisComponent","ChatComponent","ChartsComponent","GuidanceComponent","AppComponent","constructor","apiService","title","isHealthy","selectedLanguage","languages","ngOnInit","checkHealth","loadLanguages","healthCheck","subscribe","next","response","status","console","log","error","getLanguages","success","onLanguageChange","event","target","value","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["C:\\Users\\pavit\\OneDrive\\Desktop\\mit\\thanucheck\\bhooom\\frontend\\src\\app\\app.component.ts"],"sourcesContent":["/*import { Component, OnInit } from '@angular/core';\r\nimport { ApiService } from './services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n   standalone: true // <-- add this\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Mining Intelligence System';\r\n  isHealthy = false;\r\n  selectedLanguage = 'en';\r\n  languages: any = {};\r\n\r\n  constructor(private apiService: ApiService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.checkHealth();\r\n    this.loadLanguages();\r\n  }\r\n\r\n  checkHealth(): void {\r\n    this.apiService.healthCheck().subscribe({\r\n      next: (response) => {\r\n        this.isHealthy = response.status === 'healthy';\r\n        console.log('✅ Backend is healthy:', response);\r\n      },\r\n      error: (error) => {\r\n        this.isHealthy = false;\r\n        console.error('❌ Backend health check failed:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadLanguages(): void {\r\n    this.apiService.getLanguages().subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.languages = response.languages;\r\n        }\r\n      },\r\n      error: (error) => console.error('Error loading languages:', error)\r\n    });\r\n  }\r\n\r\n  onLanguageChange(event: any): void {\r\n    this.selectedLanguage = event.target.value;\r\n  }\r\n}\r\n*/\r\n\r\n// src/app/app.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ApiService } from './services/api.service';\r\n\r\n// Import child components\r\nimport { KpisComponent } from './components/kpis/kpis.component';\r\nimport { ChatComponent } from './components/chat/chat.component';\r\nimport { ChartsComponent } from './components/charts/charts.component';\r\nimport { GuidanceComponent } from './components/guidance/guidance.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    KpisComponent,\r\n    ChatComponent,\r\n    ChartsComponent,\r\n    GuidanceComponent\r\n  ]\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Mining Intelligence System';\r\n  isHealthy = false;\r\n  selectedLanguage = 'en';\r\n  languages: any = {};\r\n\r\n  constructor(private apiService: ApiService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.checkHealth();\r\n    this.loadLanguages();\r\n  }\r\n\r\n  checkHealth(): void {\r\n    this.apiService.healthCheck().subscribe({\r\n      next: (response) => {\r\n        this.isHealthy = response.status === 'healthy';\r\n        console.log('✅ Backend is healthy:', response);\r\n      },\r\n      error: (error) => {\r\n        this.isHealthy = false;\r\n        console.error('❌ Backend health check failed:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadLanguages(): void {\r\n    this.apiService.getLanguages().subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.languages = response.languages;\r\n        }\r\n      },\r\n      error: (error) => console.error('Error loading languages:', error)\r\n    });\r\n  }\r\n\r\n  onLanguageChange(event: any): void {\r\n    this.selectedLanguage = event.target.value;\r\n  }\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,QAAQ,gBAAgB;AAG5C;AACA,SAASC,aAAa,QAAQ,kCAAkC;AAChE,SAASC,aAAa,QAAQ,kCAAkC;AAChE,SAASC,eAAe,QAAQ,sCAAsC;AACtE,SAASC,iBAAiB,QAAQ,0CAA0C;AAerE,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAMvBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAL9B,KAAAC,KAAK,GAAG,4BAA4B;IACpC,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,gBAAgB,GAAG,IAAI;IACvB,KAAAC,SAAS,GAAQ,EAAE;EAE0B;EAE7CC,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAD,WAAWA,CAAA;IACT,IAAI,CAACN,UAAU,CAACQ,WAAW,EAAE,CAACC,SAAS,CAAC;MACtCC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACT,SAAS,GAAGS,QAAQ,CAACC,MAAM,KAAK,SAAS;QAC9CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,QAAQ,CAAC;MAChD,CAAC;MACDI,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACb,SAAS,GAAG,KAAK;QACtBW,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;KACD,CAAC;EACJ;EAEAR,aAAaA,CAAA;IACX,IAAI,CAACP,UAAU,CAACgB,YAAY,EAAE,CAACP,SAAS,CAAC;MACvCC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAIA,QAAQ,CAACM,OAAO,EAAE;UACpB,IAAI,CAACb,SAAS,GAAGO,QAAQ,CAACP,SAAS;;MAEvC,CAAC;MACDW,KAAK,EAAGA,KAAK,IAAKF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK;KAClE,CAAC;EACJ;EAEAG,gBAAgBA,CAACC,KAAU;IACzB,IAAI,CAAChB,gBAAgB,GAAGgB,KAAK,CAACC,MAAM,CAACC,KAAK;EAC5C;CACD;AAxCYvB,YAAY,GAAAwB,UAAA,EAbxB9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB,CAAC;EAClCC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACPlC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,eAAe,EACfC,iBAAiB;CAEpB,CAAC,C,EACWC,YAAY,CAwCxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}